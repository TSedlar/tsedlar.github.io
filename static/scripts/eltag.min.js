const ELTAG_ELEMENT_TAGS=["a","abbr","acronym","address","applet","area","article","aside","audio","b","base","basefont","bdi","bdo","big","blockquote","body","br","button","canvas","caption","center","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","dir","div","dl","dt","em","embed","fieldset","figcaption","figure","font","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hr","html","i","iframe","img","input","ins","kbd","label","legend","li","link","main","map","mark","meta","meter","nav","noframes","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strike","strong","style","sub","summary","sup","svg","table","tbody","td","template","textarea","tfoot","th","thead","time","title","tr","track","tt","u","ul","var","video","wbr"],ELTAG_ELEMENT_TRIGGERS=["onabort","onafterprint","onanimationend","onanimationiteration","onanimationstart","onbeforeprint","onbeforeunload","onblur","oncanplay","oncanplaythrough","onchange","onclick","oncontextmenu","oncopy","oncut","ondblclick","ondrag","ondragend","ondragenter","ondragleave","ondragover","ondragstart","ondrop","ondurationchange","onended","onerror","onfocus","onfocusin","onfocusout","onfullscreenchange","onfullscreenerror","onhashchange","oninput","oninvalid","onkeydown","onkeypress","onkeyup","onload","onloadeddata","onloadedmetadata","onloadstart","onmessage","onmousedown","onmouseenter","onmouseleave","onmousemove","onmouseover","onmouseout","onmouseup","onmousewheel","onoffline","ononline","onopen","onpagehide","onpageshow","onpaste","onpause","onplay","onplaying","onpopstate","onprogress","onratechange","onresize","onreset","onscroll","onsearch","onseeked","onseeking","onselect","onshow","onstalled","onstorage","onsubmit","onsuspend","ontimeupdate","ontoggle","ontouchcancel","ontouchend","ontouchmove","ontouchstart","ontransitionend","onunload","onvolumechange","onwaiting","onwheel"],PROPERTY_MAP=new Map,STATE_MAP=new Map,INIT_LIST=[],_visitTree=(e,n)=>{n(e);for(let t of e.children)_visitTree(t,n)},_renderTree=e=>_visitTree(e,e=>_rerender(e)),_createContextProxy=(e,n,t=null)=>{const o=new Proxy(n,{get:(n,o)=>{if("parent"==o){const n=_findParentContext(e);if(n)return STATE_MAP.get(n)}return t&&t[o]?t[o]:n[o]},set:(e,n,o)=>(t?t[n]=o:e[n]=o,o)});return o.setState=(n=>{if(o.state)for(let e in o.state)e in n||(n[e]=o.state[e]);o.state=n;const t=PROPERTY_MAP.get(e);t&&t.ctx&&_renderTree(t.ctx)}),o},_rerender=e=>{const n=PROPERTY_MAP.get(e);if(n&&n.ctx&&n.render){const t=STATE_MAP.get(n.ctx);if(t){for(;e.firstChild;)e.removeChild(e.firstChild);const o=_runInContext(n.render,t);e.appendChild(document.createTextNode(o))}}},_findParentContext=e=>{let n=e;for(;n.parentElement;){n=n.parentElement;const e=PROPERTY_MAP.get(n);if(e&&e.ctx)return e.ctx}return null},_initProps=()=>{for(let e of INIT_LIST){const n=PROPERTY_MAP.get(e);if(n&&!n.ctx){const t=_findParentContext(e);t&&(n.ctx=t)}}INIT_LIST.length=0},_runInContext=(fn,context)=>(fn.hasOwnProperty("prototype")?fn:function(){return eval("("+fn+")()")}).call(context),ElTag={renderElement:(e,n)=>{_initProps(),_renderTree(n),e.appendChild(n)},el:(e,n={},t=[])=>{const o=document.createElement(e);INIT_LIST.push(o);const r=Array.isArray(n)?{}:n;let a=Array.isArray(n)?n:t||[];"string"==typeof n&&(a=n),r.state?(PROPERTY_MAP.set(o,{ctx:o,render:r.render}),STATE_MAP.set(o,_createContextProxy(o,{state:r.state}))):PROPERTY_MAP.set(o,{render:r.render}),r.style||(r.style={});for(let e of ELTAG_ELEMENT_TRIGGERS)if(r[e]){const n=r[e];r[e]=(()=>{const e=STATE_MAP.get(PROPERTY_MAP.get(o).ctx);_runInContext(n,_createContextProxy(o,{ref:o},e))})}for(let e in r)o[e]=r[e];r.class&&(o.className=r.class);for(let e in r.style)o.style[e]=r.style[e];if(Array.isArray(a))for(let e of a)"string"==typeof e?o.appendChild(document.createTextNode(e)):o.appendChild(e);else o.appendChild(document.createTextNode(a));return o},app:(e={},n=[])=>ElTag.el("div",e,n),range:(e,n,t)=>{let o=[];for(let r=e;r<n;r++)o.push(t(r));return o}};for(let e of ELTAG_ELEMENT_TAGS)ElTag[e]=((n={},t=[])=>ElTag.el(e,n,t));